// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id                String   @id @default(uuid()) // شناسه یکتا
  fullname          String?
  email             String   @unique // ایمیل (یونیک)
  phone             String?  @unique // شماره تماس (اختیاری، یونیک)
  password          String // رمز عبور (هش‌شده)
  role              Role     @default(CUSTOMER) //نقش کاربر
  isActive          Boolean  @default(true) //فعال یا غیرفعال بودن حساب کاربر
  preferredLanguage String?  @default("en") // یا zh
  createdAt         DateTime @default(now()) // تاریخ ایجاد حساب
  updatedAt         DateTime @updatedAt // تاریخ آخرین بروزرسانی

  profile       UserProfile?
  bankAccounts  BankAccount[]
  UserActionLog UserActionLog[]
  ExchangeOrder ExchangeOrder[]
  resetTokens   PasswordResetOTP[]
}

enum Role {
  ADMIN
  OPERATOR
  CUSTOMER
}

model PasswordResetOTP {
  id        String   @id @default(uuid()) // شناسه یکتا برای توکن
  otp       String //رمز بکیار مصرف
  attempts  Int      @default(0) // تعداد دفعات ورود اشتباه
  expiresAt DateTime // زمان انقضای توکن
  createdAt DateTime @default(now()) // زمان ایجاد

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String // آیدی کاربر مرتبط
}

enum OrderStatus {
  PENDING // در انتظار بررسی اپراتور
  WAITING_PAYMENT // در انتظار پرداخت توسط کاربر
  PAID // پرداخت شده
  APPROVED // تایید نهایی اپراتور
  REJECTED // رد شده توسط اپراتور
  CANCELED // لغو شده توسط کاربر
  COMPLETED // تسویه و انجام شده
  WAITING_REVIEW // 👈 اضافه شده: در انتظار بررسی اپراتور
}

model UserProfile {
  id       String  @id @default(uuid())
  userId   String  @unique
  avatar   String? // آواتار کاربر (اختیاری)
  address  String? // آدرس (اختیاری)
  bio      String? // بیوگرافی (اختیاری)
  whatsapp String? // شماره واتس‌اپ
  wechat   String? // آیدی وی‌چت

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExchangeOrder {
  id            Int         @id @default(autoincrement())
  userId        String // کد کاربر
  amount        Float // مقدار یوان
  finalAmount   Float // مبلغ نهایی تومان
  bankAccountId String
  isDisputed    Boolean     @default(false) // اعتراض داره؟
  status        OrderStatus @default(PENDING)
  paymentRef    String? // شماره پیگیری پرداخت
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  expiredAt     DateTime? // زمان انقضای سفارش (اختیاری برای سفارش‌های معترض)

  // bankAccount
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  //user
  user        Users       @relation(fields: [userId], references: [id])
}

model BankAccount {
  id            String  @id @default(uuid())
  userId        String
  bankName      String? // نام بانک
  accountOwner  String // صاحب حساب
  accountNumber String? @unique // شماره حساب
  iban          String? @unique // شماره شبا
  cardNumber    String? @unique // شماره کارت
  cardImage     String? //تصویر کارت بانکی

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  ExchangeOrder ExchangeOrder[]
}

model CompanyInfo {
  id        String           @id @default(uuid())
  name      String
  slogan    String?
  logo      String?
  addresses CompanyAddress[]
}

model CompanyAddress {
  id        String      @id @default(uuid())
  companyId String
  company   CompanyInfo @relation(fields: [companyId], references: [id])
  address   String
  phone     String
  country   String
  email     String
  latitude  Float?
  longitude Float?
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String
}



model SliderImage {
  id          String   @id @default(uuid())
  title       String
  imageUrl    String
  description String?
  link        String?
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
}

model ExchangeRate {
  id           String   @id @default(uuid())
  currency     String
  basePrice    Float
  buyPrice     Float
  sellPrice    Float
  profitMargin Float
  createdAt    DateTime @default(now())
}

model UserActionLog {
  id          String   @id @default(uuid()) // شناسه یکتا
  userId      String // کد کاربر
  user        Users    @relation(fields: [userId], references: [id]) // ارتباط یک به چند با مدل User
  action      String // نوع عملیات (ورود، سفارش، تغییر رمز و ...)
  description String? // توضیحات اضافه (اختیاری)
  date        DateTime @default(now()) // تاریخ و زمان عملیات
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

enum SettingGroup {
  GENERAL
  EMAIL
  SECURITY
  // می‌تونی دسته‌های بعدی رو اینجا اضافه کنی
}

enum SettingKey {
  PROFIT_MARGIN
  ADMIN_EMAIL
  ORDER_DISPUTE_THRESHOLD
  SMTP_HOST
  SMTP_PORT
  SMTP_USER
  SMTP_PASS
  SENDER_EMAIL
  // بقیه تنظیمات اینجا اضافه می‌شن
}

model Setting {
  id        Int          @id @default(autoincrement())
  key       SettingKey   @unique
  value     String
  group     SettingGroup
  updatedAt DateTime     @updatedAt
}
